@startuml
class Juego {
-jugador: Jugador 
-mapa: Mapa
-peleaActual: PeleaActual
-tesoroEncontrado: boolean
+Juego()
+configurarJuegoInicial():void
+descansarPersonaje():boolean
+ejecutarTurnoDeCombate():boolean
+esTesoroEncontrado():boolean
+finDelJuego():void
-generarCoordenadasUnicas(Random, Set<String>): int[]
+getCriatura():Criatura
+getJugador():Jugador
+getMapa():Mapa
+getPeleActual():Pelea
+iniciarPelea(Ubicacion): void
reclamarRecompe	nsa():boolean
+setJugador(Jugador):void
+verificarVictoria(Criatura, Ubicacion):void
+verMapa():void
+visitarUbicacion (Ubicacion):void

}

class Jugador{
-nombre: String
-personaje: personaje
-misiones: list<Misiones>
-ubicacionActual : int 
+jugador(nombre String, tipoPersonaje String): Jugador
+getUbicacionActual(): Ubicacion
+getPersonaje(): Personaje
+mostrarInformacionPersonaje(): void
-inicializarMisiones(): void
+completarMision(nombreMision String): void
+reclamarRecompensaEnUbicacionNeutral(): void
+setUbicacionActual(Ubicacion): void
+visitarUbicacion(Ubicacion): void
}


class Pelea {
-contadorTurnos int
-personaje: Personaje
-criatura: Criatura
-eventosPelea
-experienciaPorVictoria: int
+pelea(personaje Personaje, criatura Criatura): Pelea
+ejecutarTurno(): void
+ganoPersonaje(): boolean
+getCriatura(): Criatura
+getEventosPelea(): List<String>
+getPersonaje(): Personaje
-otorgarExperiencia(): void
-registrarEvento
}

abstract Criatura {
#nombre: String
#puntosVida: int
#nivelAtaque: int
#nivelDefensa: int
#experienciaOtorgada
-Criatura(nombre String, puntosVida int, nivelAtaque int, nivelDefensa int) Criatura
+getNombre(): String
+getPuntosVida(): int
+getNivelAtaque(): int
+getNivelDefensa(): int
+recibirGolpe(danio int): void
+atacar(personaje Personaje):void
+estaVivo(): void
+getExperienciaOtorgada(): int
+setPuntosvida(int): void
}

class Dragon extends Criatura{
+dragon(nombre String, puntosVida int, nivelAtaque int,nivelDefensa int): Dragon
+atacar(personaje Personaje): void
}
class Espectro extends Criatura{
+espctro(nombre String, puntosVida int, nivelAtaque int,nivelDefensa int): Espectro
+atacar(personaje Personaje): void
}
class Troll extends Criatura{
+troll(nombre String, puntosVida int, nivelAtaque int,nivelDefensa int): Troll
+atacar(personaje Personaje): void
}

class Mapa{
-mapa: int
-fila: int
-columna: int
-inicializarMapa(): void
+mapa(): Mapa
+establecerUbicacionConTesoro(fila int, columna int): void
+establecerUbicacionConCriatura(fila int, columna int): void
+establecerUbicacionNeutral(fila int, columna int): void
+esUbicacionConTesoro(fila int, columna int): boolean
+obtenerUbicacion(fila int, columna int): Ubicacion
+mostrarMapa(): void
}

class Ubicacion{
-nombre: String
-criatura: Criatura
-contieneTesoro: boolean
-esNeutral: boolean
-recompensaReclamada: boolean
-visitada: boolean
+ubicacion(nombre String, esNeutral boolean): Ubicacion
+setCriatura(criatura Criatura): void
+tieneCriatura(): boolean
+setNeutral(boolean): void
+getCriatura(): Criatura
+getNombre(): String
+tieneTesoro(): boolean
+esVisitada(): boolean
+marcarComoVisitada(): void
+setTesoro(contieneTesoro boolean): void
+mostrarTesoroSiGanaste():void
+esNeutral():boolean
+descansar(personaje Personaje): void
+reclamarRecompensa(personaje Personaje): void
+canjearExperiencia(personaje Personaje): void
+reclamarRecompensaMisiones(jugador Jugador): void
+toString():void
}



abstract Mision {
#nombre: String
#descripcion: String
#recompensaDescripcion: String
#completada: boolean
+mision(nombre String, descripcion String, recompensaDescripcion String): Mision
+{abstract}completar()
+{abstract}aplicarRecompensa()
+getNombre(): String
+getDescripcion():String
+estaCompletada(): boolean
}

class MisionDerrotarDragon extends Mision{
-nombreUbicacion: String
-dragon: Dragon
-obtenerUbicacion(String): Ubicacion
+misionDerrotarDragon(dragon Dragon): MisionDerrotarDragon
+completar():void
+aplicarRecompensa(personaje Personaje):void
}

class MisionEliminarEspectros extends Mision{
-espectrosEliminados: int
-espectrosNecesarios: int
+misionEliminarEspectros(): MisionEliminarEspectros
+incrementarEspectrosEliminados(): void
+completar():void
+aplicarRecompensa(personaje Personaje):void
}

class MisionLimpiaAldeaTroll extends Mision{
-trollsEliminados(): int
-trollsNecesarios():int
+misionLimpiaAldeaTroll():MisionLimpiaAldeaTroll
+incrementarTrollsEliminados(): void
+completar():void
+aplicarRecompensa(personaje Personaje):void
}

class MisionRecuparAmuleto extends Mision{
+misionRecuparAmuleto(): MisionRecuparAmuleto
+completar():void
+aplicarRecompensa(personaje Personaje):void
}

abstract Personaje{
#nombre: String
#puntosVida:int
#nivelAtaque:int
#nivelDefensa:int
#experiencia: int
+personaje(nombre String, puntosVida int, nivelAtaque int, nivelDefensa int): Personaje
+getNombre(): String
+getPuntosVida():String
+getNivelAtaque():int
+getNivelDefensa():int
+getExperiencia(): int
+ganarExperiencia(): void
+recibirGolpe(): void
+{abstract}atacar(criatura Criatura): void
+mejorar():void
+setPuntosVida(puntosVida int): void
+mejorarAtaque(): boolean
+mejorarDefensa(): boolean

}

class Arquero extends Personaje{
-punteria: int
-agilidad:int
+arquero(nombre String, puntosVida int, nivelAtaque int, nivelDefensa int): Arquero
+atacar(criatura Criatura): void
+recibirGolpe(danio int): void
}
class Guerrero extends Personaje{
-contadorAtaques: int
+guerrero(nombre String, puntosVida int, nivelAtaque int, nivelDefensa int): Guerrero
+atacar(criatura Criatura): void
+reiniciarContadorAtaques(): void
}
class Mago extends Personaje {
+mago(nombre String, puntosVida int, nivelAtaque int, nivelDefensa int):Mago
+atacar(criatura Criatura): void
+curarse():void
}

Mapa "1" *--- "0..n" Ubicacion
Pelea "1"*-- "0..n" Personaje
Ubicacion "1" o-- "1" Criatura
Pelea "1" *-- "1" Criatura
Juego "1" *-- "1"Mapa
Juego  "1" *--  "1" Jugador
Jugador "1"*-- "0..n" Mision
Jugador  "1"*--  "1"Personaje
Juego "1" o--"0..n" Pelea
@enduml
