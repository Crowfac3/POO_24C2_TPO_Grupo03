@startuml

class Juego {
	-estado: String
	// "en progreso", "victoria" o "derrota"
	-personaje: Personaje
	-Mapa: Mapa
	+iniciarJuego(nombre: String, TipoDeClase: TipoDeClase)
	+realizarAccion(accion: String)
	+verificarVictoria(): Boolean
	+verificarDerrota(): Boolean
}

abstract class Jugador {
	+Nombre
}


abstract class Personaje extends Jugador {
	+Nombre: String
	+EXP: int
	+HP: int
	+Ataque: int
	+Defensa: int
	+Habilidades: Habilidad[]
	+getHabilidad(): String
	+descansar()
	+mejorarPersonaje(expGastado: int)
	+reclamarRecompensa(mision: Mision)
}

abstract class TipoDeClase implements TieneHabilidadPropia{
	+habilidadInnata()
}

Interface TieneHabilidadPropia {
	+habilidadInnata()
} 

class Mago extends TipoDeClase{
	+Habilidad = ["Al finalizar Pelea, HP = 100%", "Inmune contra espectros"]: Habilidades
}
class Guerrero extends TipoDeClase{
	+Habilidad = ["Derriba Troll de un solo golpe", "Despues de tercer GolpeDeAtaque, Ataque * 2"]: Habilidades
}
class Arquero extends TipoDeClase {
	+Punteria: int
	+Agilidad: int
	+Habilidad = ["Esquiva golpe = Agilidad%", "Punteria = 100% contra Dragon"]: Habilidades
}

abstract class Criatura {
	+EXPRecompensa
	+Nombre: String
	+HP: int
	+Ataque: int
	+Defensa: int
	+Habilidades: Habilidades[]
	+getHabilidad(): String
}

class Dragon extends Criatura{
	+Habilidad = "Lucha contra Guerrero, Ataque + 30%"
}
class Troll extends Criatura{
	+Habilidad = "Lucha contra Mago, Defensa + 15%"
}
class Espectro extends Criatura{
	+Habilidad = "Lucha contra Arquero, Ataque + 20%"
}

class Pelea {
	+iniciarPelea(personaje: Personaje, criatura: Criatura)
	+calcularDanio(atacanteAtaque: int, atacanteHabilidad: int, defensorDefensa: int, defensorHabilidad: int): int
}

class Mapa{
	-Ubicaciones: Ubicacion[10][10]
	+mostrarMapa()
	+viajar(ubicacion: Ubicacion)
}

class Ubicacion{
	-tieneCriatura: Boolean
	-tieneTesoro: Boolean
	+revelarTesoro()
}

class UbicacionNeutral extends Ubicacion{
	+descansar(personaje: Personaje)
	+mejorarPersonaje(personaje: Personaje, EXP: int)
	+reclamarRecompensa(personaje: Personaje, mision: Mision)
}

abstract class Mision {
	-nombre: String
	-completada: Boolean
	+setRecompensa(personaje: Personaje): void
}

class MisionDragonDelNorte extends Mision {
	+nombre = "Derrota al Drag√≥n del Norte"
	+setRecompensa(personaje: Personaje): void
}

class MisionAmuletoPerdido extends Mision {
	+nombre = "Recupera el Amuleto Perdido"
	+setRecompensa(personaje: Personaje): void
}

class MisionEspectrosDelPantano extends Mision {
	+nombre = "Elimina a los Espectros del Pantano"
	+setRecompensa(personaje: Personaje): void
}

class MisionTrollsAldea extends Mision {
	+nombre = "Limpia la Aldea de los Trolls"
	+setRecompensa(personaje: Guerrero): void
}


class Tesoro

Personaje *-- TieneHabilidadPropia : integra

Personaje "1" o-- "1" Mapa : Explora 
Mapa "1" *-- "100" Ubicacion : contiene 
Ubicacion "1" *-- "1" Tesoro : tiene
Ubicacion "1" *-- "0..*" Mision : provee

Personaje "1" *-- "0..*" Pelea : participa
Criatura "1" *-- "0..*" Pelea : participa

Juego "1" o-- "1" Jugador 

@enduml